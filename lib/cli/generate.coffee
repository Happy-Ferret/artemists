#!/usr/bin/env coffee
###
 * Artemis code generation
 *
 * emulate the partial class strategy for extensions
 * used by Entitas_CSharp
 *
###
fs = require('fs')
path = require('path')
mkdirp = require('mkdirp')
config = require("#{process.cwd()}/artemis.json")


params = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item.split(':')[0]
  return b.join(sep)

tsparams = (a, sep = ', ') ->
  b = []
  for item in a
    b.push item.split(':')[0]+'?:'+item.split(':')[1]
  return b.join(sep)

tsvalue = (a) ->
  switch a.split(':')[1]
    when 'string' then '""'
    when 'number' then '0'
    else 'null'

module.exports =
#
# generate entity extensions
#
# @return none
#
  run: () ->


    ts = [] # StringBuilder for generated typescript code
    js = [] # StringBuilder for generated javascript code
    d0 = [] # StringBuilder for associated *.d.ts file: Components
    d1 = [] # StringBuilder for associated *.d.ts file: Entity
    d2 = [] # StringBuilder for associated *.d.ts file: Aspect
    d3 = [] # StringBuilder for associated *.d.ts file: World
    ex = {} # Extensions

    d1.push "        /** BEGIN: Entity Extensions for #{config.namespace} */"
    d2.push "        /** BEGIN: Aspect Extensions for #{config.namespace} */"
    d3.push "        /** BEGIN: World Extensions for #{config.namespace} */"
    ###
     * Header
    ###
    ts.push "/**"
    ts.push " * Generated by artemis #{require('../../package.json').version}"
    ts.push " * do not edit this file"
    ts.push " */"
    ts.push "module artemis {"
    ts.push "  export module components {"
    ts.push ""
    ts.push "    import World = artemis.World;"
    ts.push "    import Entity = artemis.Entity;"
    ts.push "    import Aspect = artemis.Aspect;"
    ts.push "    import EntitySystem = artemis.EntitySystem;"
    ts.push "    import PooledComponent = artemis.PooledComponent;"
    ts.push "    import Pooled = artemis.annotations.Pooled;"

    js.push "/**"
    js.push " * Generated by artemis #{require('../../package.json').version}"
    js.push " * do not edit this file"
    js.push " */"
    js.push "(function(){"
    js.push "  var Bag = artemis.utils.Bag;"
    js.push "  var World = artemis.World;"
    js.push "  var Entity = artemis.Entity;"
    js.push "  var Aspect = artemis.Aspect;"
    js.push "  var TagManager = artemis.managers.TagManager;"
    js.push "  var GroupManager = artemis.managers.GroupManager;"
    js.push "  var SingleEntityException = artemis.SingleEntityException;"
    for Name, properties of config.components
      js.push "  var #{Name}Component = artemis.components.#{Name}Component;"
    js.push "  var CoreComponentIds = artemis.components.CoreComponentIds;"
    ###
     * Components Enum
    ###
    ts.push   ""
    ts.push "    export enum CoreComponentIds {"
    for Name, properties of config.components
      ts.push "      #{Name},"
    ts.push "      TotalComponents"
    ts.push "    }"
    ts.push ""


    js.push "  "
    js.push "  Bag.prototype.getSingleEntity = function() {"
    js.push "    var size = this.size();"
    js.push "    if (size === 1) {"
    js.push "      return this.get(0);"
    js.push "    } else if (size === 0) {"
    js.push "      return null;"
    js.push "    } else {"
    js.push "      throw new Error('SingleEntityException: found '+size+' items');"
    js.push "    }"
    js.push "  };"
    js.push "  "

    ###
     * Components Class Definitions
    ###
    ts.push ""
    for Name, properties of config.components
      ts.push "    @Pooled()"
      ts.push "    export class #{Name}Component extends PooledComponent {"
      ts.push "      public static className = '#{Name}Component';"
      ts.push "      public initialize(#{params(properties)}) {"
      for p in properties
        ts.push "        this.#{p.split(':')[0]} = #{p.split(':')[0]};"
      ts.push "      }"
      for p in properties
        ts.push "      public #{p};"
      ts.push "    }"
      for p in properties
        ts.push "    #{Name}Component.prototype.#{p.split(':')[0]} = #{tsvalue(p)};"
    ts.push ""

    ###
     * Components Class Declarations
    ###
    d0.push ""
    for Name, properties of config.components
      d0.push "    interface #{Name}Component {"
      for p in properties
        d0.push "      #{p};"
      d0.push "    }"
    d0.push ""


    ###
     * Extend Entity with components
    ###
    ts.push ""

    js.push "  Entity.prototype.start = function(name) {"
    js.push "    if (name !== undefined) {"
    js.push "      this.world_.getManager(GroupManager).add(this, name);"
    js.push "    }"
    js.push "    this.addToWorld();"
    js.push "    return this;"
    js.push "  };"
    js.push ""

    d1.push "        start(name?:string): Entity;"


    js.push "  World.prototype.loadExtensions = function() {"
    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      js.push "    Entity._#{name}ComponentMapper = this.getMapper(#{Name}Component);"
      js.push "    this.setManager(new GroupManager());"
      js.push "    this.setManager(new TagManager());"
    js.push "  };"

    d3.push "        loadExtensions(): void;"

    for Name, properties of config.components
      name = Name[0].toLowerCase()+Name[1...];
      switch properties
        when false
          js.push "  Object.defineProperty(Entity.prototype, 'is#{Name}', {"
          js.push "    get: function() {"
          js.push "      return Entity._#{name}ComponentMapper.has(this);"
          js.push "    },"
          js.push "    set: function(value) {"
          js.push "      if (value !== this.is#{Name}) {"
          js.push "        if (value) {"
          js.push "           this.addComponent(#{Name}Component);"
          js.push "           this.changedInWorld();"
          js.push "         } else {"
          js.push "           this.removeComponentByType(#{Name}Component);"
          js.push "           this.changedInWorld();"
          js.push "        }"
          js.push "      }"
          js.push "    }"
          js.push "  });"
          js.push "  Entity.prototype.set#{Name} = function(value) {"
          js.push "    this.is#{Name} = value;"
          js.push "    return this;"
          js.push "  };"

          d1.push "        is#{Name}: boolean;"
          d1.push "        set#{Name}(value: boolean);"

        else
          js.push "  Object.defineProperty(Entity.prototype, '#{name}', {"
          js.push "    get: function() {"
          js.push "      return Entity._#{name}ComponentMapper.get(this);"
          js.push "    }"
          js.push "  });"
          js.push "  Object.defineProperty(Entity.prototype, 'has#{Name}', {"
          js.push "    get: function() {"
          js.push "      return Entity._#{name}ComponentMapper.has(this);"
          js.push "    }"
          js.push "  });"
          js.push "  Entity.prototype.add#{Name} = function(#{params(properties)}) {"
          js.push "    this.addComponent(#{Name}Component, #{params(properties)});"
          js.push "    return this;"
          js.push "  };"
          js.push "  Entity.prototype.replace#{Name} = function(#{params(properties)}) {"
          js.push "    if (this.has#{Name}) {"
          js.push "      this.removeComponentByType(#{Name}Component)"
          js.push "      return this;"
          js.push "    }"
          js.push "    this.addComponent(#{Name}Component, #{params(properties)});"
          js.push "    return this;"
          js.push "  };"
          js.push "  Entity.prototype.remove#{Name} = function() {"
          js.push "    if (this.has#{Name}) {"
          js.push "      this.removeComponentByType(#{Name}Component)"
          js.push "    }"
          js.push "  };"
          js.push ""

          d1.push "        #{name}: artemis.components.#{Name}Component;"
          d1.push "        has#{Name}: boolean;"
          d1.push "        add#{Name}(#{properties.join(', ')});"
          d1.push "        replace#{Name}(#{properties.join(', ')});"
          d1.push "        remove#{Name}();"


    ###
     * Singleton Entities
    ###
    for Name, pooled of config.entities
      if pooled
        name = Name[0].toLowerCase()+Name[1...];
        properties = config.components[Name]
        if config.components[Name] is false
          js.push "  Object.defineProperty(World.prototype, '#{name}Entity', {"
          js.push "    get: function() {"
          js.push "      return this.getManager(GroupManager).getEntities('#{Name}').getSingleEntity()"
          js.push "    }"
          js.push "  });"
          js.push "  Object.defineProperty(World.prototype, 'is#{Name}', {"
          js.push "    get: function() {"
          js.push "      return this.#{name}Entity != null;"
          js.push "    },"
          js.push "    set: function(value) {"
          js.push "      var entity = this.#{name}Entity;"
          js.push "      if (value != (entity != null)) {"
          js.push "        if (value) {"
          js.push "          this.createEntity('#{Name}').is#{Name} = true;"
          js.push "          this.changedInWorld();"
          js.push "        } else {"
          js.push "          this.deleteEntity(entity);"
          js.push "          this.changedInWorld();"
          js.push "        }"
          js.push "      }"
          js.push "    }"
          js.push "  });"

          d3.push "        #{name}Entity: Entity;"
          d3.push "        is#{Name}: boolean;"

        else
          js.push "  Object.defineProperty(World.prototype, '#{name}Entity', {"
          js.push "    get: function() {"
          js.push "      return this.getManager(TagManager).getEntity('#{Name}');"
          js.push "    }"
          js.push "  });"
          js.push "  Object.defineProperty(World.prototype, '#{name}', {"
          js.push "    get: function() {"
          js.push "      return this.#{name}Entity.#{name};"
          js.push "    }"
          js.push "  });"
          js.push "  Object.defineProperty(World.prototype, 'has#{Name}', {"
          js.push "    get: function() {"
          js.push "      return this.#{name}Entity != undefined;"
          js.push "    }"
          js.push "  });"
          js.push "  World.prototype.set#{Name} = function(#{params(properties)}) {"
          js.push "    if (this.has#{Name}) {"
          js.push "      throw new SingleEntityException('#{Name}');"
          js.push "    }"
          js.push "    var entity = this.createEntity('#{Name}');"
          js.push "    this.getManager(TagManager).register('#{Name}', entity);"
          js.push "    entity.add#{Name}(#{params(properties)});"
          js.push "    return entity;"
          js.push "  };"
          js.push "  World.prototype.replace#{Name} = function(#{params(properties)}) {"
          js.push "    var entity = this.#{name}Entity;"
          js.push "    if (entity == null) {"
          js.push "      entity = this.set#{Name}(#{params(properties)});"
          js.push "    } else {"
          js.push "      entity.replace#{Name}(#{params(properties)});"
          js.push "    }"
          js.push "    return entity;"
          js.push "  };"
          js.push "  World.prototype.remove#{Name} = function() {"
          js.push "    this.getManager(TagManager).unregister('#{Name}');"
          js.push "    this.deleteEntity(#{name}Entity);"
          js.push "  };"

          d3.push "        #{name}Entity: Entity;"
          d3.push "        #{name}: artemis.components.#{Name}Component;"
          d3.push "        has#{Name}: boolean;"
          d3.push "        set#{Name}(#{properties.join(', ')}): Entity;"
          d3.push "        replace#{Name}(#{properties.join(', ')}): Entity;"
          d3.push "        remove#{Name}(): void;"

    d1.push "        /** END: Entity Extensions for #{config.namespace} */"
    d2.push "        /** END: Aspect Extensions for #{config.namespace} */"
    d3.push "        /** END: World Extensions for #{config.namespace} */"

    ts.push "  }"
    ts.push "  //artemis.browser.VisualDebugging.init();"
    ts.push "}"

    js.push "})();"

    mkdirp.sync path.dirname(path.join(process.cwd(), config.output.typescript))
    fs.writeFileSync(path.join(process.cwd(), config.output.typescript), ts.join('\n'))


    mkdirp.sync path.dirname(path.join(process.cwd(), config.output.javascript))
    fs.writeFileSync(path.join(process.cwd(), config.output.javascript), js.join('\n'))

    for Name, klass of config.extensions
      ex[Name] = [] # StringBuilder for this extension
      ex[Name].push "/*** Extensions for #{config.namespace}.#{Name} */"
      for method, args of klass
        [name, type] = method.split(':');
        ex[Name].push "        #{name}(#{args.join(', ')}):#{type};"

    def = (dts, className, dd) ->
      i = dts.indexOf(className)+className.length
      dts = dts.substr(0, i) + '\n' + dd.join('\n') + dts.substr(i);
      return dts


    dts = fs.readFileSync(path.join(__dirname, 'artemis.d.ts'), 'utf8')
    dts = def(dts, '    class Entity {', d1)
#    dts = def(dts, '    class Aspect {', d2)
    dts = def(dts, '    class World {', d3)
    for Name, d0 of ex
      dts = def(dts, "    class #{Name} {", d0)

    dts = """
/**
 * Artemis-ECS definitions for #{config.namespace}
 */
#{dts}
"""
    mkdirp.sync path.dirname(path.join(process.cwd(), config.output.declaration))
    fs.writeFileSync(path.join(process.cwd(), config.output.declaration), dts)


#declare module artemis.components {
##{d0.join('\n')}
#    }
