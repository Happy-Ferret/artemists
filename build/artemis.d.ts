declare module example.components {
    enum Layer {
        DEFAULT = 0,
        BACKGROUND = 1,
        ACTORS_1 = 2,
        ACTORS_2 = 3,
        ACTORS_3 = 4,
        PARTICLES = 5,
    }
    enum EFFECT {
        PEW = 0,
        ASPLODE = 1,
        SMALLASPLODE = 2,
    }
}
declare module example.core {
    class Constants {
        static FRAME_WIDTH: number;
        static FRAME_HEIGHT: number;
        static Groups: {
            PLAYER_BULLETS: string;
            PLAYER_SHIP: string;
            ENEMY_SHIPS: string;
            ENEMY_BULLETS: string;
        };
    }
}
/**
 * Generated by artemis 0.0.5
 * do not edit this file
 */
declare module artemis {
    module components {
        import PooledComponent = artemis.PooledComponent;
        enum CoreComponentIds {
            Bounds = 0,
            ColorAnimation = 1,
            Enemy = 2,
            Expires = 3,
            Health = 4,
            ParallaxStar = 5,
            Player = 6,
            Position = 7,
            ScaleAnimation = 8,
            SoundEffect = 9,
            Sprite = 10,
            Velocity = 11,
            Score = 12,
            TotalComponents = 13,
        }
        class BoundsComponent extends PooledComponent {
            static className: string;
            initialize(radius: any): void;
            radius: number;
        }
        class ColorAnimationComponent extends PooledComponent {
            static className: string;
            initialize(redMin: any, redMax: any, redSpeed: any, greenMin: any, greenMax: any, greenSpeed: any, blueMin: any, blueMax: any, blueSpeed: any, alphaMin: any, alphaMax: any, alphaSpeed: any, redAnimate: any, greenAnimate: any, blueAnimate: any, alphaAnimate: any, repeat: any): void;
            redMin: number;
            redMax: number;
            redSpeed: number;
            greenMin: number;
            greenMax: number;
            greenSpeed: number;
            blueMin: number;
            blueMax: number;
            blueSpeed: number;
            alphaMin: number;
            alphaMax: number;
            alphaSpeed: number;
            redAnimate: boolean;
            greenAnimate: boolean;
            blueAnimate: boolean;
            alphaAnimate: boolean;
            repeat: boolean;
        }
        class EnemyComponent extends PooledComponent {
            static className: string;
            initialize(): void;
        }
        class ExpiresComponent extends PooledComponent {
            static className: string;
            initialize(delay: any): void;
            delay: number;
        }
        class HealthComponent extends PooledComponent {
            static className: string;
            initialize(health: any, maximumHealth: any): void;
            health: number;
            maximumHealth: number;
        }
        class ParallaxStarComponent extends PooledComponent {
            static className: string;
            initialize(): void;
        }
        class PlayerComponent extends PooledComponent {
            static className: string;
            initialize(): void;
        }
        class PositionComponent extends PooledComponent {
            static className: string;
            initialize(x: any, y: any): void;
            x: number;
            y: number;
        }
        class ScaleAnimationComponent extends PooledComponent {
            static className: string;
            initialize(min: any, max: any, speed: any, repeat: any, active: any): void;
            min: number;
            max: number;
            speed: number;
            repeat: boolean;
            active: boolean;
        }
        class SoundEffectComponent extends PooledComponent {
            static className: string;
            initialize(effect: any): void;
            effect: number;
        }
        class SpriteComponent extends PooledComponent {
            static className: string;
            initialize(layer: any, object: any): void;
            layer: number;
            object: Object;
        }
        class VelocityComponent extends PooledComponent {
            static className: string;
            initialize(x: any, y: any): void;
            x: number;
            y: number;
        }
        class ScoreComponent extends PooledComponent {
            static className: string;
            initialize(value: any): void;
            value: number;
        }
    }
}
declare module example.templates {
    import Layer = example.components.Layer;
    import IEntityTemplate = artemis.IEntityTemplate;
    import Container = PIXI.Container;
    class EnemyShipTemplate implements IEntityTemplate {
        protected cache: {};
        protected sprites: Container;
        constructor();
        buildEntity(entity: artemis.Entity, world: artemis.World, name: string, layer: Layer, health: number, x: number, y: number, velocityX: number, velocityY: number, boundsRadius: number): artemis.Entity;
    }
}
declare module example.templates {
    import IEntityTemplate = artemis.IEntityTemplate;
    import Texture = PIXI.Texture;
    import Container = PIXI.Container;
    class ExplosionTemplate implements IEntityTemplate {
        protected template: Texture;
        protected sprites: Container;
        constructor();
        buildEntity(entity: artemis.Entity, world: artemis.World, x: number, y: number, scale: number): artemis.Entity;
    }
    class SmallExplosionTemplate extends ExplosionTemplate {
        buildEntity(entity: artemis.Entity, world: artemis.World, x: number, y: number): artemis.Entity;
    }
    class BigExplosionTemplate extends ExplosionTemplate {
        buildEntity(entity: artemis.Entity, world: artemis.World, x: number, y: number): artemis.Entity;
    }
}
declare module example.templates {
    import IEntityTemplate = artemis.IEntityTemplate;
    import Texture = PIXI.Texture;
    import Container = PIXI.Container;
    class ParticleTemplate implements IEntityTemplate {
        protected template: Texture;
        protected sprites: Container;
        constructor();
        buildEntity(entity: artemis.Entity, world: artemis.World, x: number, y: number): artemis.Entity;
    }
}
declare module example.templates {
    import IEntityTemplate = artemis.IEntityTemplate;
    import Texture = PIXI.Texture;
    import Container = PIXI.Container;
    class PlayerBulletTemplate implements IEntityTemplate {
        protected template: Texture;
        protected sprites: Container;
        constructor();
        buildEntity(entity: artemis.Entity, world: artemis.World, x: number, y: number): artemis.Entity;
    }
}
declare module example.templates {
    import IEntityTemplate = artemis.IEntityTemplate;
    import Entity = artemis.Entity;
    import World = artemis.World;
    import Texture = PIXI.Texture;
    import Container = PIXI.Container;
    class PlayerTemplate implements IEntityTemplate {
        protected template: Texture;
        protected sprites: Container;
        constructor();
        buildEntity(entity: Entity, world: World): Entity;
    }
}
declare module example.templates {
    import IEntityTemplate = artemis.IEntityTemplate;
    import Texture = PIXI.Texture;
    import Container = PIXI.Container;
    class StarTemplate implements IEntityTemplate {
        protected template: Texture;
        protected sprites: Container;
        constructor();
        buildEntity(entity: artemis.Entity, world: artemis.World): artemis.Entity;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntitySystem = artemis.EntitySystem;
    import ImmutableBag = artemis.utils.ImmutableBag;
    class CollisionSystem extends EntitySystem {
        private collisionPairs;
        private sprites;
        constructor();
        initialize(): void;
        protected processEntities(entities: ImmutableBag<Entity>): void;
        protected checkProcessing(): boolean;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class ColorAnimationSystem extends EntityProcessingSystem {
        constructor();
        protected processEach(e: Entity): void;
    }
}
declare module example.systems {
    import VoidEntitySystem = artemis.systems.VoidEntitySystem;
    class EntitySpawningTimerSystem extends VoidEntitySystem {
        private timer1;
        private timer2;
        private timer3;
        constructor();
        protected processSystem(): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import DelayedEntityProcessingSystem = artemis.systems.DelayedEntityProcessingSystem;
    class ExpiringSystem extends DelayedEntityProcessingSystem {
        constructor();
        protected processDelta(e: Entity, accumulatedDelta: number): void;
        protected processExpired(e: Entity): void;
        protected getRemainingDelay(e: Entity): number;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class HealthRenderSystem extends EntityProcessingSystem {
        private texts;
        private sprites;
        constructor();
        inserted(e: Entity): void;
        protected removed(e: Entity): void;
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import VoidEntitySystem = artemis.systems.VoidEntitySystem;
    class HudRenderSystem extends VoidEntitySystem {
        private activeEntities;
        private totalCreated;
        private totalDeleted;
        private sprites;
        constructor();
        initialize(): void;
        processSystem(): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class MovementSystem extends EntityProcessingSystem {
        constructor();
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import IntervalEntityProcessingSystem = artemis.systems.IntervalEntityProcessingSystem;
    class ParallaxStarRepeatingSystem extends IntervalEntityProcessingSystem {
        constructor();
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class PlayerInputSystem extends EntityProcessingSystem {
        private static FireRate;
        private shoot;
        private timeToFire;
        private mouseVector;
        private sprites;
        constructor();
        initialize(): void;
        protected processEach(e: Entity): void;
        protected onTouchStart: (event: any) => boolean;
        protected onTouchMove: (event: any) => boolean;
        protected onTouchEnd: (event: any) => void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import IntervalEntityProcessingSystem = artemis.systems.IntervalEntityProcessingSystem;
    class RemoveOffscreenShipsSystem extends IntervalEntityProcessingSystem {
        constructor();
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class ScaleAnimationSystem extends EntityProcessingSystem {
        constructor();
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntityProcessingSystem = artemis.systems.EntityProcessingSystem;
    class SoundEffectSystem extends EntityProcessingSystem {
        constructor();
        processEach(e: Entity): void;
    }
}
declare module example.systems {
    import Entity = artemis.Entity;
    import EntitySystem = artemis.EntitySystem;
    import ImmutableBag = artemis.utils.ImmutableBag;
    class SpriteRenderSystem extends EntitySystem {
        private sprites;
        constructor();
        initialize(): void;
        protected checkProcessing(): boolean;
        processEntities(entities: ImmutableBag<Entity>): void;
        protected removed(e: Entity): void;
    }
}
declare module example {
    class GameController {
        private world;
        private spriteRenderSystem;
        private healthRenderSystem;
        private hudRenderSystem;
        constructor();
        start(): void;
        update(delta: number): void;
    }
}
